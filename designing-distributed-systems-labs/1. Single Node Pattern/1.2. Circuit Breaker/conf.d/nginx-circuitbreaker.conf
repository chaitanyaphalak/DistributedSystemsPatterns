# In case of any errors try the next upstream server before returning an error
# proxy_next_upstream      error timeout invalid_header http_502 http_503 http_504;

upstream backend {
	# least_conn;

	# PASSIVE HEALTH CHECKS
	# 
	# For passive health checks, NGINX and NGINX Plus monitor transactions as they happen, and try to resume failed connections. If the transaction still cannot be resumed, NGINX and NGINX 
	# Plus mark the server as unavailable and temporarily stop sending requests to it until it is marked active again.

	# server dummy-deployment:80; // max_fails=1 fail_timeout=5s; # slow_start=30s;
    # server dummy-deployment:80 max_fails=2 fail_timeout=30s slow_start=30s;
	# server dummy-deployment:80 max_fails=2 fail_timeout=30s slow_start=30s;
	server www.hotmail.com;
}

server {

	# listen 443;
	listen 80;
	
	# Note: The Nginx image we are including at this point, doesn't support Nginx Plus features listed below
    # location /health-check {
     #    internal;
     #    health_check uri=/health match=conditions fails=1 interval=3s;
	 #	 proxy_pass http://backend;
     #}

	 # These are the conditions the /health requests to the service must match in order for it to be deemed healthy
	 # https://docs.nginx.com/nginx/admin-guide/load-balancer/http-health-check/
	 match conditions {
         status 200-399;
         body ~ "OK";
     }

	 location / {
	 	 
		 # Retry Pattern
		 # health_check interval=10 fails=3 passes=2;

         # ACTIVE HEALTH CHECKS
         # 
         # NGINX Plus can periodically check the health of upstream servers by sending special health‑check requests to each server and verifying the correct response.
         #
         # The "uri" parameter is the endpoint on the "dummyservice" server that will be used to determine health of the server. 
         # The "match" parameter is the conditions the response of /alive has to match in order for it to be deemed healthy
         # The "fails" parameter is the number after how many failed attempts the server is deemed to be unhealthy
         # The "intervals" parameter indicates the delay between calls to /alive to check the server's health
         # The "passes" parameter is the number of successful calls to /alive are needed to mark the server as healthy again.
		 # health_check uri=/ready match=conditions fails=1 interval=10s passes=10;

		 proxy_pass http://backend;
		 add_header Content-Type text/plain;
	 }

	 location /healthz {
         access_log off;
         return 200;
     }

}
